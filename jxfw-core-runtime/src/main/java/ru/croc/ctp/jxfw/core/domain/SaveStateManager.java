package ru.croc.ctp.jxfw.core.domain;

import java.util.Collection;
import java.util.Optional;


/**
 * <p> Позволяет в runtime перекрывать значения параметра {@code savedState} доменного
 * объекта, в рамках текущего {@link Thread}. т.е. каждый поток использует свой собственный
 * контекст перекрытия.
 *
 * <p> Каждый класс доменого объекта имеет своё значение по умолчанию,
 * которое формируется в момент генерации сервиса доменного объекта
 * на основании: параметра {@code saveState} аннотации {@code XFWObject}
 * или более приоритетного параметра jxfw.domain.service.save-state в xtend.properties
 * на уровне пакета.
 *
 * <p> Сохранение состония выполняется при получении объекта, существующего в БД, по ид,
 * через сервис доменного объекта. Сервис использует метод {@code isEnable}, для определения
 * загрузить ли сохраненное сотояние из БД. Если вернётся пустой {@link Optional}, то будет
 * использованно значение по умолчанию для класса(определенное в момент компиляции).
 *
 * <p> Определив свою реализацию сервиса SaveStateManager и в частности метод {@code isEnable},
 * можно влиять на поведение перекрытия в любом месте приложения.
 *
 * <p> Перекрытие устанавливается на пакет и его классы, но не расспространяется на его
 * подпакеты и классы расположенные в них. Порядок операций важен и напоминает работу
 * с множествами. т.е. например: установка правила на класс, а затем противоположного правила
 * на его пакет приведут к затиранию первой установки для класса.
 *
 * <p> <b>Внимание:</b> Сервис для {@link Thread} изначально перекрытий не имеет, но
 * после установки, состояние будет применяться до уничтожения потока. Поэтому, следует
 * проявить осторожность при использовании сервиса с пулами потоков. <i> На данный момент
 * рекомендуется использовать сервис только с модулем трансфера т.к. он использует
 * на каждый запуск новый поток</i>.
 *
 * @author Alexander Golovin
 * @since 1.6
 */
public interface SaveStateManager {
    /**
     * Включает сохранение состояния для доменных объектов переданных классов.
     *
     * @param clazz класс
     * @param classes еще классы.
     */
    void enable(Class<?> clazz, Class<?>... classes);

    /**
     * Включает сохранение состояния для доменных объектов переданных классов.
     *
     * @param classes классы.
     */
    void enable(Collection<Class<?>> classes);

    /**
     * Включает сохранение состояния для доменных объектов классов из переданных пакетов.
     *
     * @param pack пакет
     * @param packages еще пакеты.
     */
    void enable(Package pack, Package... packages);

    /**
     * Включает сохранение состояния для всех доменных объектов.
     */
    void enableAll();

    /**
     * Выключает сохранение состояния для доменных объектов переданных классов.
     *
     * @param clazz класс
     * @param classes еще классы.
     */
    void disable(Class<?> clazz, Class<?>... classes);

    /**
     * Выключает сохранение состояния для доменных объектов переданных классов.
     *
     * @param classes классы.
     */
    void disable(Collection<Class<?>> classes);

    /**
     * Выключает сохранение состояния для доменных объектов классов из переданных пакетов.
     *
     * @param pack пакет
     * @param packages еще пакеты.
     */
    void disable(Package pack, Package... packages);

    /**
     * Выключает сохранение состояния для всех доменных объектов.
     */
    void disableAll();

    /**
     * Сбрасывает перекрытие параметра для доменных объектов переданных классов.
     * Для каждого класса будет использованно его значение по умолчанию.
     *
     * @param clazz класс
     * @param classes еще классы.
     */
    void reset(Class<?> clazz, Class<?>... classes);

    /**
     * Сбрасывает перекрытие параметра для доменных объектов переданных классов.
     * Для каждого класса будет использованно его значение по умолчанию.
     *
     * @param classes классы.
     */
    void reset(Collection<Class<?>> classes);

    /**
     * Сбрасывает перекрытие параметра для доменных объектов классов переданных пакетов.
     * Для каждого класса будет использованно его значение по умолчанию.
     *
     * @param pack пакет
     * @param packages еще пакеты.
     */
    void reset(Package pack, Package... packages);

    /**
     * Сбрасывает перекрытие параметра для всех доменных объектов.
     * Для каждого класса будет использованно его значение по умолчанию.
     */
    void resetAll();

    /**
     * Проверяет перекрываемое значение сохранять ли состоние объекта.
     *
     * @param clazz класс для которого производится проверка.
     * @return true/false если значение было перекрыто, иначе null.
     */
    Optional<Boolean> isEnable(Class<?> clazz);
}
