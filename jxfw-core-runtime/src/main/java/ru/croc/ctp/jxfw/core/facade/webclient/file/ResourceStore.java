package ru.croc.ctp.jxfw.core.facade.webclient.file;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

/**
 * <p>Интерфейс сервиса временного хранения загруженного контента.
 * Хранит контент после загрузки на сервер с клиента и до сохранения соответсвующих
 * доменных объектов с бинарными свойствами.</p>
 * <p>Сервисы, реализующие этот интерфейс, могут применять разные механизмы хранения контента.</p>
 * <p>Несколько примеров: локальная файловая система сервера, сетевая файловая папка, ECM-репозиторий.
 * Поэтому этот API для передачи контента использует только потоки, {@link File} нигде не используется.</p>
 *
 * @author SPlaunov
 */
public interface ResourceStore {

    /**
     * Добавляет в хранилище загруженный ресурс, возвращая идентификатор
     * ресурса, используя который потом можно получить его.
     *
     * @param resourceProperties Свойства добавляемого ресурса
     * @param contentStream      Поток, из которого будет считано содержимое добавляемого ресурса
     * @return Идентификатор сохраненного ресурса
     * @throws IOException Если произошла ошибка при копировании контента из переданного потока
     */
    String addResource(ResourceProperties resourceProperties, InputStream contentStream) throws IOException;

    /**
     * Удаляет ресурс из временного хранилища.
     *
     * @param resourceId Идентификатор ранее загруженного ресурса. Если ресурс с заданным идентификатором
     *                   не найден в хранилище, метод должен вернуть управление без генерации исключения
     */
    void deleteResource(String resourceId);

    /**
     * Старт считывания ресурсов, содержащихся в хранилище. 
     * Необязателен к вызову, может применяться для организации кеширования ресурсов, работает в паре с {@code endReading}
     */
    void startReading();

    /**
     * <p>Завершение считывания ресурсов, содержащихся во временном хранилище.</p>
     * <p>Применяется в паре со {@code startReading}.</p>
     */
    void endReading();

    /**
     * <p>Возвращает поток для считывания сохраненного во временное хранилище ресурса.</p>
     * <p>Вызывающий код должен позаботиться о закрытии полученного потока и удалении ресурса методом {@code
     * deleteResource}.
     * 
     * <p>После вызова {@code deleteResource} или в случае, если ресурс не существует, вернет исключение {@code IllegalStateException}
     *
     * @param resourceId Идентификатор ранее загруженного ресурса
     * @return Поток для чтения содержимого ресурса
     * @throws IllegalStateException, если ресурс во временном хранилище не определен или был удален {@code deleteResource} ранее
     */
    InputStream getResourceStream(String resourceId);
    
    /**
     * Возвращает структуру данных, содержащую информацию о ранее сохраненном во временное хранилище ресурсе.
     *
     * @param resourceId Идентификатор ранее загруженного ресурса
     * @return Информация о ранее сохраненном во временном хранилище ресурсе
     * @throws IllegalStateException, если ресурс во временном хранилище не определен или был удален {@code deleteResource} ранее
     */
    ResourceProperties getResourceProperties(String resourceId);
}
