package ru.croc.ctp.jxfw.mojo;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.reflections.Reflections;
import org.reflections.util.ConfigurationBuilder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.cassandra.core.convert.CassandraCustomConversions;
import org.springframework.data.cassandra.core.cql.generator.CreateTableCqlGenerator;
import org.springframework.data.cassandra.core.cql.keyspace.CreateTableSpecification;
import org.springframework.data.cassandra.core.mapping.CassandraMappingContext;
import org.springframework.data.cassandra.core.mapping.CassandraPersistentEntity;
import org.springframework.data.cassandra.core.mapping.Table;

import ru.croc.ctp.jxfw.converter.BlobWriteConverter;
import ru.croc.ctp.jxfw.converter.LocalDateTimeWriteConverter;
import ru.croc.ctp.jxfw.converter.ZonedDateTimeWriteConverter;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * @author SMufazzalov
 * @since 1.4
 */
@Mojo(
        name = "generateCql",
        defaultPhase = LifecyclePhase.PACKAGE
)
public class GenerateCqlScriptsMojo extends AbstractScriptMojo {

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {

        try {
            //получить доменные объекты С*
            Set<Class<?>> cassandraDomains = getCassDomainObjects();

            if (cassandraDomains.size() < 1) {
                getLog().info("0 CassandraDomainObjects found, nothing to generate, exiting");
                return;
            }

            for (Class<?> cassandraDomain : cassandraDomains) {
                getLog().info("generating CQL script for " + cassandraDomain.getSimpleName());

                String cql = getScript(cassandraDomain);
                getLog().info(cql);

                //выложить скрипт файликом
                createScriptFile(cassandraDomain, cql);
            }

        } catch (MalformedURLException e) {
            getLog().error(e);
        } catch (IOException e) {
            getLog().error(e);
        }
    }

    private void createScriptFile(Class<?> cassandraDomain, String cql) throws IOException {
        Path path = Paths.get(outputDirectory.toURI());
        Path cass = path.resolve("cql");
        Files.createDirectories(cass);

        File script = new File(cass.toFile(), cassandraDomain.getSimpleName() + ".cql");
        try (PrintWriter writer = new PrintWriter(script, "UTF-8")) {
            writer.println("-- generated by jXFW");
            writer.println();
            writer.println(cql);

            getLog().info("Generated CQL file: " + script.getAbsolutePath());
        } catch (FileNotFoundException e) {
            getLog().error(e);
        } catch (UnsupportedEncodingException e) {
            getLog().error(e);
        }
    }

    /**
     * Получить скрипт CREATE TABLE.
     * @param cassandraDomain домен
     * @return скрипт
     */
    public static String getScript(Class<?> cassandraDomain) {
        CassandraMappingContext cassMappingCtx = new CassandraMappingContext();

        {
            List<Converter<?, ?>> converters = new ArrayList<Converter<?, ?>>();
            converters.add(new BlobWriteConverter());
            converters.add(new ZonedDateTimeWriteConverter());
            converters.add(new LocalDateTimeWriteConverter());
            cassMappingCtx.setCustomConversions(new CassandraCustomConversions(converters));
        }

        CassandraPersistentEntity<?> persistentEntity = cassMappingCtx.getPersistentEntity(cassandraDomain);
        CreateTableSpecification createTableSpecificationFor = cassMappingCtx
                .getCreateTableSpecificationFor(persistentEntity);
        return new CreateTableCqlGenerator(createTableSpecificationFor).toCql();
    }

    private Set<Class<?>> getCassDomainObjects() throws MalformedURLException, MojoExecutionException {
        //директория с классами проекта
        URL url = new File(project.getBuild().getDirectory()).toURL();
        getLog().info("project.getBuild().getOutputDirectory() : " + url);

        Reflections reflections = new Reflections(
                new ConfigurationBuilder()
                        .setUrls(url)
                        .addClassLoaders(getClassLoader())
        );

        Set<Class<?>> cassandraDomains = reflections.getTypesAnnotatedWith(Table.class);

        getLog().info(
                MessageFormat
                        .format("Total num of classes annotated with Table found: {0}", cassandraDomains.size())
        );
        return cassandraDomains;
    }

}
