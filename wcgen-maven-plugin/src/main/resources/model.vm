/*
	File was generated by CROC jXFW
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
define(["i18n!./nls/resources"], function (resources) {
	"use strict";

	return {
		enums: {
#foreach($enum in $context.eEnums)
#if( $foreach.hasNext )#set($enumComma = ",")#else#set($enumComma = "")#end
			$enum.name: {
				vt: "i4",
				flags: $context.getEnumFlags($enum),
				descr: resources["model.$enum.name"],
				members: {
#foreach($literal in $enum.eLiterals)
#if( $foreach.hasNext )#set($literalComma = ",")#else#set($literalComma = "")#end
					$literal.name: {value: $literal.value, descr: resources["model.${enum.name}.${literal.name}"]}$literalComma
#end				
				}
			}$enumComma
#end		
		},
		complex: {
#foreach($class in $context.eComplexTypeClasses)
#if( $foreach.hasNext )#set($classComma = ",")#else#set($classComma = "")#end
			$class.name: {
				descr: resources["model.$class.name"],
 #if($class.eSuperTypes.size() > 0)
				base: "$class.eSuperTypes[0].name",
#end
				props: {
#foreach($field in $class.eStructuralFeatures)
#if(!$context.excludeFieldsFilter().test($field))
#if( $foreach.hasNext )#set($fieldComma = ",")#else#set($fieldComma = "")#end
					$field.name: {descr: resources["model.${class.name}.${field.name}"], vt: "$context.getTypeName($field)"$context.getTypeParams($field)#if($context.isComplexTypeField($field))$context.getComplexTypeNameField($field)#end$context.printFacetsInformation($field)}$fieldComma
#end
#end
				}
			}$classComma
#end		
		},
		entities: {
#foreach($class in $context.eClasses)
#if( $foreach.hasNext )#set($classComma = ",")#else#set($classComma = "")#end
			$class.name: {
				descr: resources["model.$class.name"],
#if ($context.isTransientXfwObject($class))
				temp: true,
#end
#if($context.isAbstract($class))
				abstract: true,
#end
#if($class.eSuperTypes.size() > 0)
				base: "$class.eSuperTypes[0].name",
#end
				props: {
#foreach($field in $class.ownAndOverridenStructuralFeatures)
#if(!$context.excludeFieldsFilter().test($field))
#if( $foreach.hasNext )#set($fieldComma = ",")#else#set($fieldComma = "")#end
					$field.name: {descr: resources["model.${class.name}.${field.name}"], vt: "$context.getTypeName($field)"#if($context.isEnum($field)), flags: $field.many #end #if($context.isTransient($class) && $context.isFieldTypeAssianbleToDomainObject($field))#end#if($context.isTransientField($field)), temp: true#end$context.getTypeParams($field)$context.getComplexKeyFieldInfo($field)#if($context.isComplexTypeField($field))$context.getComplexTypeNameField($field)#end#if($context.getTypeName($field) == "binary")#if($context.getContentType($field)), contentType:"$context.getContentType($field)"#end#if($context.getAcceptFileTypes($field)), acceptFileTypes:"$context.getAcceptFileTypes($field)"#end#end$context.printFacetsInformation($field)}$fieldComma
#end
#end
				}
			}$classComma
#end		
		}
	}
});
