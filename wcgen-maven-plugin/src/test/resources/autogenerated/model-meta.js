/*
	File was generated by CROC jXFW
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
define(["i18n!./nls/resources"], function (resources) {
	"use strict";

	return {
		enums: {
			LocalityType: {
				vt: "i4",
				flags: false,
				descr: resources["model.LocalityType"],
				members: {
					Town: {value: 0, descr: resources["model.LocalityType.Town"]},
					Village: {value: 1, descr: resources["model.LocalityType.Village"]}
				}
			},
			QuestionType: {
				vt: "i4",
				flags: false,
				descr: resources["model.QuestionType"],
				members: {
					OneOption: {value: 0, descr: resources["model.QuestionType.OneOption"]},
					ManyOptions: {value: 1, descr: resources["model.QuestionType.ManyOptions"]},
					YesNo: {value: 2, descr: resources["model.QuestionType.YesNo"]}
				}
			},
			UserRole: {
				vt: "i4",
				flags: true,
				descr: resources["model.UserRole"],
				members: {
					Guest: {value: 1, descr: resources["model.UserRole.Guest"]},
					Admin: {value: 2, descr: resources["model.UserRole.Admin"]},
					User: {value: 4, descr: resources["model.UserRole.User"]}
				}
			},
			ParticipantRole: {
				vt: "i4",
				flags: true,
				descr: resources["model.ParticipantRole"],
				members: {
					Empty: {value: 0, descr: resources["model.ParticipantRole.Empty"]},
					Viewer: {value: 1, descr: resources["model.ParticipantRole.Viewer"]},
					Voter: {value: 2, descr: resources["model.ParticipantRole.Voter"]},
					Manager: {value: 4, descr: resources["model.ParticipantRole.Manager"]}
				}
			},
			MessageStatus: {
				vt: "i4",
				flags: false,
				descr: resources["model.MessageStatus"],
				members: {
					NEW: {value: 1, descr: resources["model.MessageStatus.NEW"]},
					PROCESSING: {value: 2, descr: resources["model.MessageStatus.PROCESSING"]},
					COMPLETE: {value: 3, descr: resources["model.MessageStatus.COMPLETE"]},
					ERROR: {value: 4, descr: resources["model.MessageStatus.ERROR"]}
				}
			}
		},
		complex: {
			Address: {
				descr: resources["model.Address"],
 				props: {
					street: {descr: resources["model.Address.street"], vt: "string", nullable: true, maxLen: 100},
					house: {descr: resources["model.Address.house"], vt: "string", nullable: true, maxLen: 5},
					block: {descr: resources["model.Address.block"], vt: "string", nullable: true, maxLen: 20},
					date: {descr: resources["model.Address.date"], vt: "date", nullable: true},
					locality: {descr: resources["model.Address.locality"], vt: "complex", nullable: true , ref: "Locality"}
				}
			},
			Locality: {
				descr: resources["model.Locality"],
 				props: {
					name: {descr: resources["model.Locality.name"], vt: "string", nullable: true, maxLen: 255},
					type: {descr: resources["model.Locality.type"], vt: "enum", nullable: true, ref: "LocalityType"}
				}
			}
		},
		entities: {
			GroupFilter: {
				descr: resources["model.GroupFilter"],
				temp: true,
				props: {
					users: {descr: resources["model.GroupFilter.users"], vt: "object" , nullable: true, ref: "User", many: true, lazyLoad: true},
					onlyNotEmpty: {descr: resources["model.GroupFilter.onlyNotEmpty"], vt: "boolean" , nullable: true}
				}
			},
			OutboundMessage: {
				descr: resources["model.OutboundMessage"],
				base: "Message",
				props: {
					inboundMessageId: {descr: resources["model.OutboundMessage.inboundMessageId"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			MessageArchive: {
				descr: resources["model.MessageArchive"],
				base: "Message",
				props: {
					inboundMessageId: {descr: resources["model.MessageArchive.inboundMessageId"], vt: "string" , nullable: true, maxLen: 255},
					messageId: {descr: resources["model.MessageArchive.messageId"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Comment: {
				descr: resources["model.Comment"],
				props: {
					text: {descr: resources["model.Comment.text"], vt: "string" , nullable: true, maxLen: 255},
					survey: {descr: resources["model.Comment.survey"], vt: "object" , nullable: true, ref: "Survey", opposite: "comments"},
					created: {descr: resources["model.Comment.created"], vt: "dateTime" , nullable: true},
					author: {descr: resources["model.Comment.author"], vt: "object" , nullable: true, ref: "User"}
				}
			},
			SurveyFilter: {
				descr: resources["model.SurveyFilter"],
				temp: true,
				props: {
					organizers: {descr: resources["model.SurveyFilter.organizers"], vt: "object" , nullable: true, ref: "User", many: true, lazyLoad: true},
					createdFrom: {descr: resources["model.SurveyFilter.createdFrom"], vt: "dateTime" , nullable: true},
					surveyAge: {descr: resources["model.SurveyFilter.surveyAge"], vt: "timeSpan" , nullable: true},
					suspended: {descr: resources["model.SurveyFilter.suspended"], vt: "boolean" , nullable: true},
					organizer: {descr: resources["model.SurveyFilter.organizer"], vt: "object" , nullable: true, ref: "User"},
					title: {descr: resources["model.SurveyFilter.title"], vt: "string" , nullable: true, maxLen: 255},
					createdTo: {descr: resources["model.SurveyFilter.createdTo"], vt: "dateTime" , nullable: true}
				}
			},
			MessageBody: {
				descr: resources["model.MessageBody"],
				props: {
					messageId: {descr: resources["model.MessageBody.messageId"], vt: "string" , nullable: true, maxLen: 255},
					body: {descr: resources["model.MessageBody.body"], vt: "binary" , nullable: true,"contentType":""}
				}
			},
			InboundMessage: {
				descr: resources["model.InboundMessage"],
				base: "Message",
				props: {
				}
			},
			MessageType: {
				descr: resources["model.MessageType"],
				props: {
					name: {descr: resources["model.MessageType.name"], vt: "string" , nullable: true, maxLen: 255},
					handler: {descr: resources["model.MessageType.handler"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Message: {
				descr: resources["model.Message"],
				abstract: true,
				props: {
					messageType: {descr: resources["model.Message.messageType"], vt: "object" , nullable: false, ref: "MessageType"},
					status: {descr: resources["model.Message.status"], vt: "enum", flags: false  , nullable: true, ref: "MessageStatus"},
					statusDate: {descr: resources["model.Message.statusDate"], vt: "dateTime" , nullable: true},
					creationDate: {descr: resources["model.Message.creationDate"], vt: "dateTime" , nullable: true},
					expirationDate: {descr: resources["model.Message.expirationDate"], vt: "dateTime" , nullable: true}
				}
			},
			List: {
				descr: resources["model.List"],
				props: {
				}
			},
			UserPOJO: {
				descr: resources["model.UserPOJO"],
				temp: true,
				props: {
					lastName: {descr: resources["model.UserPOJO.lastName"], vt: "string" , nullable: true, maxLen: 255},
					login: {descr: resources["model.UserPOJO.login"], vt: "string" , nullable: true, maxLen: 255},
					address: {descr: resources["model.UserPOJO.address"], vt: "complex" , nullable: true , ref: "Address"},
					firstName: {descr: resources["model.UserPOJO.firstName"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			SurveyParticipant: {
				descr: resources["model.SurveyParticipant"],
				props: {
					role: {descr: resources["model.SurveyParticipant.role"], vt: "enum", flags: true  , nullable: true, ref: "ParticipantRole"},
					user: {descr: resources["model.SurveyParticipant.user"], vt: "object" , nullable: true, ref: "User"},
					survey: {descr: resources["model.SurveyParticipant.survey"], vt: "object" , nullable: true, ref: "Survey", opposite: "participants"},
					group: {descr: resources["model.SurveyParticipant.group"], vt: "object" , nullable: true, ref: "Group"}
				}
			},
			SurveyPOJO: {
				descr: resources["model.SurveyPOJO"],
				temp: true,
				props: {
					created: {descr: resources["model.SurveyPOJO.created"], vt: "dateTime" , nullable: true},
					organizerLink: {descr: resources["model.SurveyPOJO.organizerLink"], vt: "string" , nullable: true, maxLen: 255},
					organizer: {descr: resources["model.SurveyPOJO.organizer"], vt: "string" , nullable: true, maxLen: 255},
					text: {descr: resources["model.SurveyPOJO.text"], vt: "string" , nullable: true, maxLen: 255},
					surveyLink: {descr: resources["model.SurveyPOJO.surveyLink"], vt: "string" , nullable: true, maxLen: 255},
					title: {descr: resources["model.SurveyPOJO.title"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Vote: {
				descr: resources["model.Vote"],
				props: {
					comments: {descr: resources["model.Vote.comments"], vt: "string" , nullable: true, maxLen: 255},
					question: {descr: resources["model.Vote.question"], vt: "object" , nullable: true, ref: "Question", opposite: "votes"},
					option: {descr: resources["model.Vote.option"], vt: "object" , nullable: true, ref: "Option", opposite: "votes"},
					user: {descr: resources["model.Vote.user"], vt: "object" , nullable: true, ref: "User", opposite: "votes"},
					text: {descr: resources["model.Vote.text"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			UserExt: {
				descr: resources["model.UserExt"],
				temp: true,
				props: {
					lastName: {descr: resources["model.UserExt.lastName"], vt: "string" , nullable: true, maxLen: 255},
					firstName: {descr: resources["model.UserExt.firstName"], vt: "string" , nullable: true, maxLen: 255},
					user: {descr: resources["model.UserExt.user"], vt: "object" , nullable: true, ref: "User"},
					login: {descr: resources["model.UserExt.login"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Question: {
				descr: resources["model.Question"],
				props: {
					votes: {descr: resources["model.Question.votes"], vt: "object" , nullable: true, ref: "Vote", opposite: "question", many: true},
					allowOptionAdding: {descr: resources["model.Question.allowOptionAdding"], vt: "boolean" , nullable: true},
					type: {descr: resources["model.Question.type"], vt: "enum", flags: false  , nullable: false, ref: "QuestionType"},
					text: {descr: resources["model.Question.text"], vt: "string" , nullable: false, maxLen: 255},
					survey: {descr: resources["model.Question.survey"], vt: "object" , nullable: true, ref: "Survey", opposite: "questions"},
					options: {descr: resources["model.Question.options"], vt: "object" , nullable: true, ref: "Option", opposite: "question", many: true}
				}
			},
			Option: {
				descr: resources["model.Option"],
				props: {
					question: {descr: resources["model.Option.question"], vt: "object" , nullable: true, ref: "Question", opposite: "options"},
					votes: {descr: resources["model.Option.votes"], vt: "object" , nullable: true, ref: "Vote", opposite: "option", many: true},
					text: {descr: resources["model.Option.text"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Age: {
				descr: resources["model.Age"],
				temp: true,
				props: {
					age: {descr: resources["model.Age.age"], vt: "string" , nullable: true, maxLen: 255},
					birthDay: {descr: resources["model.Age.birthDay"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			Group: {
				descr: resources["model.Group"],
				props: {
					users: {descr: resources["model.Group.users"], vt: "object" , nullable: true, ref: "User", many: true, lazyLoad: true},
					roles: {descr: resources["model.Group.roles"], vt: "enum", flags: true  , nullable: true, ref: "UserRole"},
					name: {descr: resources["model.Group.name"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			User: {
				descr: resources["model.User"],
				props: {
					firstName: {descr: resources["model.User.firstName"], vt: "string" , nullable: true, maxLen: 255},
					login: {descr: resources["model.User.login"], vt: "string" , nullable: true, maxLen: 255},
					address: {descr: resources["model.User.address"], vt: "complex" , nullable: true , ref: "Address"},
					created: {descr: resources["model.User.created"], vt: "date" , nullable: true},
					password: {descr: resources["model.User.password"], vt: "string" , nullable: true, maxLen: 255},
					lastVisit: {descr: resources["model.User.lastVisit"], vt: "dateTimeTz" , nullable: true},
					votes: {descr: resources["model.User.votes"], vt: "object" , nullable: true, ref: "Vote", opposite: "user", many: true},
					groups: {descr: resources["model.User.groups"], vt: "object" , nullable: true, ref: "Group", many: true},
					karma: {descr: resources["model.User.karma"], vt: "i8" , nullable: true},
					lastLogin: {descr: resources["model.User.lastLogin"], vt: "dateTime" , nullable: true},
					role: {descr: resources["model.User.role"], vt: "enum", flags: true  , nullable: true, ref: "UserRole"},
					lastName: {descr: resources["model.User.lastName"], vt: "string" , nullable: true, maxLen: 255},
					createdTime: {descr: resources["model.User.createdTime"], vt: "time" , nullable: true},
					avatar: {descr: resources["model.User.avatar"], vt: "binary" , nullable: true,"contentType":"\"image/*\""}
				}
			},
			Survey: {
				descr: resources["model.Survey"],
				props: {
					changableVotes: {descr: resources["model.Survey.changableVotes"], vt: "boolean" , nullable: false},
					title: {descr: resources["model.Survey.title"], vt: "string" , nullable: false, maxLen: 255},
					organizer: {descr: resources["model.Survey.organizer"], vt: "object" , nullable: true, ref: "User"},
					allowOptionAdding: {descr: resources["model.Survey.allowOptionAdding"], vt: "boolean" , nullable: false},
					comments: {descr: resources["model.Survey.comments"], vt: "object" , nullable: true, ref: "Comment", opposite: "survey", many: true, lazyLoad: true},
					participants: {descr: resources["model.Survey.participants"], vt: "object" , nullable: true, ref: "SurveyParticipant", opposite: "survey", many: true},
					suspended: {descr: resources["model.Survey.suspended"], vt: "boolean" , nullable: true},
					closed: {descr: resources["model.Survey.closed"], vt: "dateTime" , nullable: true},
					showVotesBeforeVote: {descr: resources["model.Survey.showVotesBeforeVote"], vt: "boolean" , nullable: false},
					showVoters: {descr: resources["model.Survey.showVoters"], vt: "boolean" , nullable: false},
					text: {descr: resources["model.Survey.text"], vt: "text" , nullable: true, maxLen: 2500},
					questions: {descr: resources["model.Survey.questions"], vt: "object" , nullable: true, ref: "Question", opposite: "survey", many: true, lazyLoad: true},
					created: {descr: resources["model.Survey.created"], vt: "dateTime" , nullable: true,  minInclusive: "2015-03-01T12:00:00"}
				}
			}
		}
	}
});
